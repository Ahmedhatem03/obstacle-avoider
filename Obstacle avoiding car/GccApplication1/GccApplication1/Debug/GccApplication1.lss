
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c3a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00000c3a  00000cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002110  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ba0  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001077  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d8  00000000  00000000  00004bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007b9  00000000  00000000  00004ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fdf  00000000  00000000  00005689  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00006668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fd 02 	call	0x5fa	; 0x5fa <main>
  7a:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DcMotor_init>:
 *  Author: hp
 */ 
#include"DcMotor.h"
//Configure The Pins in The H bridge
void DcMotor_init(void){
	DIO_ConfigChannel(DIO_PORTD,Enable1,OUTPUT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	64 e0       	ldi	r22, 0x04	; 4
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTD,Enable2,OUTPUT);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	65 e0       	ldi	r22, 0x05	; 5
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTC,Input1,OUTPUT);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	63 e0       	ldi	r22, 0x03	; 3
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTC,Input2,OUTPUT);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTC,Input3,OUTPUT);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	65 e0       	ldi	r22, 0x05	; 5
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTC,Input4,OUTPUT);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	66 e0       	ldi	r22, 0x06	; 6
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
  be:	08 95       	ret

000000c0 <MoveInDirction>:

}
//Checks on the the Direction and The Motor And will move It as wished
void MoveInDirction(direction D,Motor_type M){
	switch(M){
  c0:	66 23       	and	r22, r22
  c2:	19 f0       	breq	.+6      	; 0xca <MoveInDirction+0xa>
  c4:	61 30       	cpi	r22, 0x01	; 1
  c6:	19 f1       	breq	.+70     	; 0x10e <MoveInDirction+0x4e>
  c8:	08 95       	ret
		case MotorA:
		if(D==Clockwise){
  ca:	81 11       	cpse	r24, r1
  cc:	10 c0       	rjmp	.+32     	; 0xee <MoveInDirction+0x2e>
			DIO_WriteChannel(DIO_PORTD,Enable1,STD_HIGH);
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	64 e0       	ldi	r22, 0x04	; 4
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>

			DIO_WriteChannel(DIO_PORTC,Input1,STD_HIGH);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
			DIO_WriteChannel(DIO_PORTC,Input2,STD_LOW);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
  ec:	08 95       	ret

		}
		else{
			DIO_WriteChannel(DIO_PORTD,Enable1,STD_HIGH);
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	64 e0       	ldi	r22, 0x04	; 4
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
			DIO_WriteChannel(DIO_PORTC,Input1,STD_LOW);
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	63 e0       	ldi	r22, 0x03	; 3
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
			DIO_WriteChannel(DIO_PORTC,Input2,STD_HIGH);
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	64 e0       	ldi	r22, 0x04	; 4
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 10c:	08 95       	ret

		}
		break;
		case MotorB:
		if(D==Clockwise){
 10e:	81 11       	cpse	r24, r1
 110:	10 c0       	rjmp	.+32     	; 0x132 <MoveInDirction+0x72>
			DIO_WriteChannel(DIO_PORTD,Enable2,STD_HIGH);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	65 e0       	ldi	r22, 0x05	; 5
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>

			DIO_WriteChannel(DIO_PORTC,Input3,STD_LOW);
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	65 e0       	ldi	r22, 0x05	; 5
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
			DIO_WriteChannel(DIO_PORTC,Input4,STD_HIGH);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	66 e0       	ldi	r22, 0x06	; 6
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 130:	08 95       	ret

		}
		else{
			DIO_WriteChannel(DIO_PORTD,Enable2,STD_HIGH);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	65 e0       	ldi	r22, 0x05	; 5
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
			DIO_WriteChannel(DIO_PORTC,Input3,STD_HIGH);
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	65 e0       	ldi	r22, 0x05	; 5
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
			DIO_WriteChannel(DIO_PORTC,Input4,STD_LOW);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 150:	08 95       	ret

00000152 <Stop>:
		break;
	}
}
//Stop The Two Motors at Same Instant
void Stop(){
	DIO_WriteChannel(DIO_PORTD,Enable1,STD_LOW);
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	64 e0       	ldi	r22, 0x04	; 4
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
	DIO_WriteChannel(DIO_PORTD,Enable2,STD_LOW);
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	65 e0       	ldi	r22, 0x05	; 5
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 166:	08 95       	ret

00000168 <TurnLeft>:
}
//Turn the car left by enable Motor A And Disable Motor B
void TurnLeft(){
	MoveInDirction(Clockwise,MotorA);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 60 00 	call	0xc0	; 0xc0 <MoveInDirction>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	9f e1       	ldi	r25, 0x1F	; 31
 174:	05 c0       	rjmp	.+10     	; 0x180 <TurnLeft+0x18>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 176:	e9 e1       	ldi	r30, 0x19	; 25
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <TurnLeft+0x12>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	c9 f7       	brne	.-14     	; 0x176 <TurnLeft+0xe>
	//Duration of Rotation
	_delay_ms(800);
	//Stop The car After Rotation
	Stop();
 184:	0e 94 a9 00 	call	0x152	; 0x152 <Stop>
 188:	08 95       	ret

0000018a <TurnRight>:

}
//Same As Turn Left
void TurnRight(){
	DIO_WriteChannel(DIO_PORTD,Enable1,STD_LOW);
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
	MoveInDirction(Clockwise,MotorB);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 60 00 	call	0xc0	; 0xc0 <MoveInDirction>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	9f e1       	ldi	r25, 0x1F	; 31
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <TurnRight+0x22>
 1a2:	e9 e1       	ldi	r30, 0x19	; 25
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <TurnRight+0x1c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	c9 f7       	brne	.-14     	; 0x1a2 <TurnRight+0x18>
	_delay_ms(800);
	Stop();
 1b0:	0e 94 a9 00 	call	0x152	; 0x152 <Stop>
 1b4:	08 95       	ret

000001b6 <GoForward>:
}
//Enable The Two Motors to Go Forward
void GoForward(){
	MoveInDirction(Clockwise,MotorB);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 60 00 	call	0xc0	; 0xc0 <MoveInDirction>
	MoveInDirction(Clockwise,MotorA);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 60 00 	call	0xc0	; 0xc0 <MoveInDirction>
 1c6:	08 95       	ret

000001c8 <Enable_pulse>:
	Lcd_Poss(0,0);
}
//Enable pulses to Send The Data
static void Enable_pulse(void){
	//Follow The Datasheet of The LCD_16*2
	DIO_WriteChannel(DIO_PORTB,DIO_PIN3,STD_HIGH);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	63 e0       	ldi	r22, 0x03	; 3
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <Enable_pulse+0xc>
	_delay_us(1);
	DIO_WriteChannel(DIO_PORTB,DIO_PIN3,STD_LOW);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e2:	84 ef       	ldi	r24, 0xF4	; 244
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <Enable_pulse+0x1e>
 1ea:	08 95       	ret

000001ec <Lcd_Data>:
	_delay_ms(2);
}
/*Let RS = 1 To Send Data*/
//Send the data to LCD by the given Instructions (Data Sheet)
void Lcd_Data(u8 Data){
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	c8 2f       	mov	r28, r24
	u8 High_Nibble=Data;
	u8 Low_Nibble=Data<<4;
 1f2:	d8 2f       	mov	r29, r24
 1f4:	d2 95       	swap	r29
 1f6:	d0 7f       	andi	r29, 0xF0	; 240
	DIO_WriteChannel(DIO_PORTB,DIO_PIN1,STD_HIGH);
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
	DIO_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
 202:	4c 2f       	mov	r20, r28
 204:	60 ef       	ldi	r22, 0xF0	; 240
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 4d 04 	call	0x89a	; 0x89a <DIO_WriteGroup>
	/*Enable Pulse*/
	Enable_pulse();
 20c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Enable_pulse>

	DIO_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
 210:	4d 2f       	mov	r20, r29
 212:	60 ef       	ldi	r22, 0xF0	; 240
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 4d 04 	call	0x89a	; 0x89a <DIO_WriteGroup>
	Enable_pulse();
 21a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Enable_pulse>

}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <Lcd_Cmd>:
/*Let RS = 0 To Send Command*/
//Send Commands To LCD Same As the Data
void Lcd_Cmd(lcd_Cmd_type cmd){
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	c8 2f       	mov	r28, r24
	u8 High_Nibble=cmd;
	u8 Low_Nibble=cmd<<4;
 22a:	d8 2f       	mov	r29, r24
 22c:	d2 95       	swap	r29
 22e:	d0 7f       	andi	r29, 0xF0	; 240
	DIO_WriteChannel(DIO_PORTB,DIO_PIN1,STD_LOW);
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
	DIO_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
 23a:	4c 2f       	mov	r20, r28
 23c:	60 ef       	ldi	r22, 0xF0	; 240
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 4d 04 	call	0x89a	; 0x89a <DIO_WriteGroup>
	/*Enable Pulse*/
	Enable_pulse();
 244:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Enable_pulse>

	DIO_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
 248:	4d 2f       	mov	r20, r29
 24a:	60 ef       	ldi	r22, 0xF0	; 240
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 4d 04 	call	0x89a	; 0x89a <DIO_WriteGroup>
	Enable_pulse();
 252:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Enable_pulse>


}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <Lcd_DisplayChr>:
//Function To display Character of 8 Bits
void Lcd_DisplayChr(u8 chr){
	Lcd_Data(chr);
 25c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Lcd_Data>
 260:	08 95       	ret

00000262 <Lcd_DisplayStr>:
}
//Function To Display String
void Lcd_DisplayStr(u8* str){
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
	while(*str!='\0'){
 268:	03 c0       	rjmp	.+6      	; 0x270 <Lcd_DisplayStr+0xe>
		Lcd_DisplayChr(*str);
 26a:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_DisplayChr>
		str++;
 26e:	21 96       	adiw	r28, 0x01	; 1
void Lcd_DisplayChr(u8 chr){
	Lcd_Data(chr);
}
//Function To Display String
void Lcd_DisplayStr(u8* str){
	while(*str!='\0'){
 270:	88 81       	ld	r24, Y
 272:	81 11       	cpse	r24, r1
 274:	fa cf       	rjmp	.-12     	; 0x26a <Lcd_DisplayStr+0x8>
		Lcd_DisplayChr(*str);
		str++;
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <Lcd_Poss>:
//Move to A certain Position of rows and Columns
void Lcd_Poss(u8 row,u8 col){
	switch(row){
 27c:	88 23       	and	r24, r24
 27e:	19 f0       	breq	.+6      	; 0x286 <Lcd_Poss+0xa>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	31 f0       	breq	.+12     	; 0x290 <Lcd_Poss+0x14>
 284:	08 95       	ret
		case 0:
		Lcd_Cmd(LCD_0x80+col);
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	86 0f       	add	r24, r22
 28a:	0e 94 12 01 	call	0x224	; 0x224 <Lcd_Cmd>
		break;
 28e:	08 95       	ret
		case 1:
		Lcd_Cmd(LCD_0xC0+col);
 290:	80 ec       	ldi	r24, 0xC0	; 192
 292:	86 0f       	add	r24, r22
 294:	0e 94 12 01 	call	0x224	; 0x224 <Lcd_Cmd>
 298:	08 95       	ret

0000029a <Lcd_init>:
 *  Author: hp
 */ 
#include"LCD.h"
//Configure the LCD PINS
void Lcd_init(void){
	DIO_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	64 e0       	ldi	r22, 0x04	; 4
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	65 e0       	ldi	r22, 0x05	; 5
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	66 e0       	ldi	r22, 0x06	; 6
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	67 e0       	ldi	r22, 0x07	; 7
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>

	DIO_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT); /*RS*/
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);/*RW*/
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);/*EN*/
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
	DIO_WriteChannel(DIO_PORTB,DIO_PIN2,STD_LOW);
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 2ea:	86 ea       	ldi	r24, 0xA6	; 166
 2ec:	9e e0       	ldi	r25, 0x0E	; 14
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <Lcd_init+0x54>
	_delay_ms(15);
	Lcd_Cmd(3);
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	0e 94 12 01 	call	0x224	; 0x224 <Lcd_Cmd>
 2f8:	82 ee       	ldi	r24, 0xE2	; 226
 2fa:	94 e0       	ldi	r25, 0x04	; 4
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <Lcd_init+0x62>
	_delay_ms(5);
	Lcd_Cmd(3);
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	0e 94 12 01 	call	0x224	; 0x224 <Lcd_Cmd>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 306:	81 e2       	ldi	r24, 0x21	; 33
 308:	8a 95       	dec	r24
 30a:	f1 f7       	brne	.-4      	; 0x308 <Lcd_init+0x6e>
	_delay_us(100);
	Lcd_Cmd(3);
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	0e 94 12 01 	call	0x224	; 0x224 <Lcd_Cmd>
	Lcd_Cmd(2);
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 12 01 	call	0x224	; 0x224 <Lcd_Cmd>
	Lcd_Cmd(LCD_4BIT_MODE);
 318:	88 e2       	ldi	r24, 0x28	; 40
 31a:	0e 94 12 01 	call	0x224	; 0x224 <Lcd_Cmd>
	Lcd_Poss(0,0);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 3e 01 	call	0x27c	; 0x27c <Lcd_Poss>
 326:	08 95       	ret

00000328 <Lcd_Displayu8>:
		Lcd_Cmd(LCD_0xC0+col);
		break;
	}
}
//Display a Number more than 1 Digit
void Lcd_Displayu8(u16 num){
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	ec 01       	movw	r28, r24
	Lcd_DisplayChr(num/1000+'0');
 336:	7c 01       	movw	r14, r24
 338:	f6 94       	lsr	r15
 33a:	e7 94       	ror	r14
 33c:	f6 94       	lsr	r15
 33e:	e7 94       	ror	r14
 340:	f6 94       	lsr	r15
 342:	e7 94       	ror	r14
 344:	97 01       	movw	r18, r14
 346:	a5 ec       	ldi	r26, 0xC5	; 197
 348:	b0 e2       	ldi	r27, 0x20	; 32
 34a:	0e 94 0c 06 	call	0xc18	; 0xc18 <__umulhisi3>
 34e:	8c 01       	movw	r16, r24
 350:	12 95       	swap	r17
 352:	02 95       	swap	r16
 354:	0f 70       	andi	r16, 0x0F	; 15
 356:	01 27       	eor	r16, r17
 358:	1f 70       	andi	r17, 0x0F	; 15
 35a:	01 27       	eor	r16, r17
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	80 0f       	add	r24, r16
 360:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100+'0');
 364:	28 ee       	ldi	r18, 0xE8	; 232
 366:	33 e0       	ldi	r19, 0x03	; 3
 368:	02 9f       	mul	r16, r18
 36a:	c0 01       	movw	r24, r0
 36c:	03 9f       	mul	r16, r19
 36e:	90 0d       	add	r25, r0
 370:	12 9f       	mul	r17, r18
 372:	90 0d       	add	r25, r0
 374:	11 24       	eor	r1, r1
 376:	c8 1b       	sub	r28, r24
 378:	d9 0b       	sbc	r29, r25
 37a:	7e 01       	movw	r14, r28
 37c:	f6 94       	lsr	r15
 37e:	e7 94       	ror	r14
 380:	f6 94       	lsr	r15
 382:	e7 94       	ror	r14
 384:	97 01       	movw	r18, r14
 386:	ab e7       	ldi	r26, 0x7B	; 123
 388:	b4 e1       	ldi	r27, 0x14	; 20
 38a:	0e 94 0c 06 	call	0xc18	; 0xc18 <__umulhisi3>
 38e:	8c 01       	movw	r16, r24
 390:	16 95       	lsr	r17
 392:	07 95       	ror	r16
 394:	80 e3       	ldi	r24, 0x30	; 48
 396:	80 0f       	add	r24, r16
 398:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10+'0');
 39c:	24 e6       	ldi	r18, 0x64	; 100
 39e:	20 9f       	mul	r18, r16
 3a0:	c0 01       	movw	r24, r0
 3a2:	21 9f       	mul	r18, r17
 3a4:	90 0d       	add	r25, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	c8 1b       	sub	r28, r24
 3aa:	d9 0b       	sbc	r29, r25
 3ac:	9e 01       	movw	r18, r28
 3ae:	ad ec       	ldi	r26, 0xCD	; 205
 3b0:	bc ec       	ldi	r27, 0xCC	; 204
 3b2:	0e 94 0c 06 	call	0xc18	; 0xc18 <__umulhisi3>
 3b6:	8c 01       	movw	r16, r24
 3b8:	16 95       	lsr	r17
 3ba:	07 95       	ror	r16
 3bc:	16 95       	lsr	r17
 3be:	07 95       	ror	r16
 3c0:	16 95       	lsr	r17
 3c2:	07 95       	ror	r16
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	80 0f       	add	r24, r16
 3c8:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10%10+'0');
 3cc:	ad ec       	ldi	r26, 0xCD	; 205
 3ce:	bc ec       	ldi	r27, 0xCC	; 204
 3d0:	c8 01       	movw	r24, r16
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	00 0f       	add	r16, r16
 3d8:	11 1f       	adc	r17, r17
 3da:	00 0f       	add	r16, r16
 3dc:	11 1f       	adc	r17, r17
 3de:	00 0f       	add	r16, r16
 3e0:	11 1f       	adc	r17, r17
 3e2:	08 0f       	add	r16, r24
 3e4:	19 1f       	adc	r17, r25
 3e6:	c0 1b       	sub	r28, r16
 3e8:	d1 0b       	sbc	r29, r17
 3ea:	9e 01       	movw	r18, r28
 3ec:	0e 94 0c 06 	call	0xc18	; 0xc18 <__umulhisi3>
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	96 95       	lsr	r25
 3f6:	87 95       	ror	r24
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	9c 01       	movw	r18, r24
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	82 0f       	add	r24, r18
 410:	93 1f       	adc	r25, r19
 412:	9e 01       	movw	r18, r28
 414:	28 1b       	sub	r18, r24
 416:	39 0b       	sbc	r19, r25
 418:	c9 01       	movw	r24, r18
 41a:	80 5d       	subi	r24, 0xD0	; 208
 41c:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_DisplayChr>
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	08 95       	ret

0000042e <LCD_DisplayFloat>:
//Display a Decimal Number
void LCD_DisplayFloat(f64 floatNum){
 42e:	8f 92       	push	r8
 430:	9f 92       	push	r9
 432:	af 92       	push	r10
 434:	bf 92       	push	r11
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	4b 01       	movw	r8, r22
 440:	5c 01       	movw	r10, r24
	u16 intPart=0;
	f64 fractionTemp=0;
	u16 fractionPart=0;

	intPart	=(u16)floatNum;
 442:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
 446:	6b 01       	movw	r12, r22
 448:	7c 01       	movw	r14, r24
	fractionTemp=floatNum-intPart;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 11 05 	call	0xa22	; 0xa22 <__floatunsisf>
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	c5 01       	movw	r24, r10
 458:	b4 01       	movw	r22, r8
 45a:	0e 94 75 04 	call	0x8ea	; 0x8ea <__subsf3>
	fractionPart=fractionTemp*10000;
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e4       	ldi	r19, 0x40	; 64
 462:	4c e1       	ldi	r20, 0x1C	; 28
 464:	56 e4       	ldi	r21, 0x46	; 70
 466:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__mulsf3>
 46a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
 46e:	4b 01       	movw	r8, r22
 470:	5c 01       	movw	r10, r24
	Lcd_Displayu8(intPart);
 472:	c6 01       	movw	r24, r12
 474:	0e 94 94 01 	call	0x328	; 0x328 <Lcd_Displayu8>
	Lcd_DisplayChr('.');
 478:	8e e2       	ldi	r24, 0x2E	; 46
 47a:	0e 94 2e 01 	call	0x25c	; 0x25c <Lcd_DisplayChr>
	Lcd_Displayu8(fractionPart);
 47e:	c4 01       	movw	r24, r8
 480:	0e 94 94 01 	call	0x328	; 0x328 <Lcd_Displayu8>

}
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	df 90       	pop	r13
 48a:	cf 90       	pop	r12
 48c:	bf 90       	pop	r11
 48e:	af 90       	pop	r10
 490:	9f 90       	pop	r9
 492:	8f 90       	pop	r8
 494:	08 95       	ret

00000496 <Servo_init>:
 *  Author: hp
 */
#include"Servo.h"
//Configure the The Servo PIN Using DIO Module
void Servo_init(){
	DIO_ConfigChannel(DIO_PORTD,DIO_PIN7,OUTPUT);
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	67 e0       	ldi	r22, 0x07	; 7
 49a:	83 e0       	ldi	r24, 0x03	; 3
 49c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_ConfigChannel>
 4a0:	08 95       	ret

000004a2 <Possition_Zero>:
}
//I used to Do PWM using Software
// Turn The Servo on Position Zero
void Possition_Zero(void){
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
	//Apply PWM for some time To move the Servo to Zero Position
	for(int i=0;i<100;i++){
 4a6:	c0 e0       	ldi	r28, 0x00	; 0
 4a8:	d0 e0       	ldi	r29, 0x00	; 0
 4aa:	13 c0       	rjmp	.+38     	; 0x4d2 <Possition_Zero+0x30>
		DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_LOW);
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	67 e0       	ldi	r22, 0x07	; 7
 4b0:	83 e0       	ldi	r24, 0x03	; 3
 4b2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4b6:	81 e1       	ldi	r24, 0x11	; 17
 4b8:	92 e1       	ldi	r25, 0x12	; 18
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <Possition_Zero+0x18>
			_delay_ms(18.5);
			DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_HIGH);
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	67 e0       	ldi	r22, 0x07	; 7
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 4c8:	87 e7       	ldi	r24, 0x77	; 119
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <Possition_Zero+0x2a>
}
//I used to Do PWM using Software
// Turn The Servo on Position Zero
void Possition_Zero(void){
	//Apply PWM for some time To move the Servo to Zero Position
	for(int i=0;i<100;i++){
 4d0:	21 96       	adiw	r28, 0x01	; 1
 4d2:	c4 36       	cpi	r28, 0x64	; 100
 4d4:	d1 05       	cpc	r29, r1
 4d6:	54 f3       	brlt	.-44     	; 0x4ac <Possition_Zero+0xa>
		DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_LOW);
			_delay_ms(18.5);
			DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_HIGH);
			_delay_ms(1.5);}
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <Possition_90>:
// Turn The Servo on Position 90
void Possition_90(void){
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
//Same as Position Zero
	for(int i=0;i<100;i++){
 4e2:	c0 e0       	ldi	r28, 0x00	; 0
 4e4:	d0 e0       	ldi	r29, 0x00	; 0
 4e6:	13 c0       	rjmp	.+38     	; 0x50e <Possition_90+0x30>
		DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_LOW);
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	67 e0       	ldi	r22, 0x07	; 7
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 4f2:	8a ef       	ldi	r24, 0xFA	; 250
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <Possition_90+0x18>
			_delay_ms(1);
			DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_HIGH);
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	67 e0       	ldi	r22, 0x07	; 7
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 504:	84 ef       	ldi	r24, 0xF4	; 244
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <Possition_90+0x2a>
			_delay_ms(1.5);}
}
// Turn The Servo on Position 90
void Possition_90(void){
//Same as Position Zero
	for(int i=0;i<100;i++){
 50c:	21 96       	adiw	r28, 0x01	; 1
 50e:	c4 36       	cpi	r28, 0x64	; 100
 510:	d1 05       	cpc	r29, r1
 512:	54 f3       	brlt	.-44     	; 0x4e8 <Possition_90+0xa>
		DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_LOW);
			_delay_ms(1);
			DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_HIGH);
			_delay_ms(2);}
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <Possition_180>:
// Turn The Servo on Position 180
void Possition_180(void){
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
//Same as Position Zero
	for(int i=0;i<1000;i++){
 51e:	c0 e0       	ldi	r28, 0x00	; 0
 520:	d0 e0       	ldi	r29, 0x00	; 0
 522:	13 c0       	rjmp	.+38     	; 0x54a <Possition_180+0x30>
		DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_LOW);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	67 e0       	ldi	r22, 0x07	; 7
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 52e:	8e e8       	ldi	r24, 0x8E	; 142
 530:	92 e1       	ldi	r25, 0x12	; 18
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <Possition_180+0x18>
			_delay_ms(19);
			DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_HIGH);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	67 e0       	ldi	r22, 0x07	; 7
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_WriteChannel>
 540:	8a ef       	ldi	r24, 0xFA	; 250
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <Possition_180+0x2a>
			_delay_ms(2);}
}
// Turn The Servo on Position 180
void Possition_180(void){
//Same as Position Zero
	for(int i=0;i<1000;i++){
 548:	21 96       	adiw	r28, 0x01	; 1
 54a:	c8 3e       	cpi	r28, 0xE8	; 232
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	d8 07       	cpc	r29, r24
 550:	4c f3       	brlt	.-46     	; 0x524 <Possition_180+0xa>
		DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_LOW);
			_delay_ms(19);
			DIO_WriteChannel(DIO_PORTD,DIO_PIN7,STD_HIGH);
			_delay_ms(1);}
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <HCSR04Init>:

void HCSR04Init()
{
	
	// we're setting the trigger pin as output as it will generate ultrasonic sound wave
	US_DDR|=(1<<US_TRIG_POS);
 558:	84 b3       	in	r24, 0x14	; 20
 55a:	81 60       	ori	r24, 0x01	; 1
 55c:	84 bb       	out	0x14, r24	; 20
 55e:	08 95       	ret

00000560 <GetPulseWidth>:
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	dc 01       	movw	r26, r24
 566:	05 c0       	rjmp	.+10     	; 0x572 <GetPulseWidth+0x12>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
 568:	99 99       	sbic	0x13, 1	; 19
 56a:	0a c0       	rjmp	.+20     	; 0x580 <GetPulseWidth+0x20>
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	a1 1d       	adc	r26, r1
 570:	b1 1d       	adc	r27, r1
 572:	80 3c       	cpi	r24, 0xC0	; 192
 574:	27 e2       	ldi	r18, 0x27	; 39
 576:	92 07       	cpc	r25, r18
 578:	29 e0       	ldi	r18, 0x09	; 9
 57a:	a2 07       	cpc	r26, r18
 57c:	b1 05       	cpc	r27, r1
 57e:	a0 f3       	brcs	.-24     	; 0x568 <GetPulseWidth+0x8>
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
 580:	80 3c       	cpi	r24, 0xC0	; 192
 582:	97 42       	sbci	r25, 0x27	; 39
 584:	a9 40       	sbci	r26, 0x09	; 9
 586:	b1 05       	cpc	r27, r1
 588:	79 f1       	breq	.+94     	; 0x5e8 <GetPulseWidth+0x88>
	
	//High Edge Found
	
	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
 58a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;			// This line start the counter to start counting time
 590:	1d bc       	out	0x2d, r1	; 45
 592:	1c bc       	out	0x2c, r1	; 44

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	dc 01       	movw	r26, r24
 59a:	0a c0       	rjmp	.+20     	; 0x5b0 <GetPulseWidth+0x50>
	{
		if(US_PIN & (1<<US_ECHO_POS))
 59c:	99 9b       	sbis	0x13, 1	; 19
 59e:	0f c0       	rjmp	.+30     	; 0x5be <GetPulseWidth+0x5e>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
 5a0:	2c b5       	in	r18, 0x2c	; 44
 5a2:	3d b5       	in	r19, 0x2d	; 45
 5a4:	21 36       	cpi	r18, 0x61	; 97
 5a6:	3a 4e       	sbci	r19, 0xEA	; 234
 5a8:	50 f4       	brcc	.+20     	; 0x5be <GetPulseWidth+0x5e>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	a1 1d       	adc	r26, r1
 5ae:	b1 1d       	adc	r27, r1
 5b0:	80 3c       	cpi	r24, 0xC0	; 192
 5b2:	27 e2       	ldi	r18, 0x27	; 39
 5b4:	92 07       	cpc	r25, r18
 5b6:	29 e0       	ldi	r18, 0x09	; 9
 5b8:	a2 07       	cpc	r26, r18
 5ba:	b1 05       	cpc	r27, r1
 5bc:	78 f3       	brcs	.-34     	; 0x59c <GetPulseWidth+0x3c>
		}
		else
		break;
	}

	if(i==600000)
 5be:	80 3c       	cpi	r24, 0xC0	; 192
 5c0:	97 42       	sbci	r25, 0x27	; 39
 5c2:	a9 40       	sbci	r26, 0x09	; 9
 5c4:	b1 05       	cpc	r27, r1
 5c6:	99 f0       	breq	.+38     	; 0x5ee <GetPulseWidth+0x8e>
	return US_NO_OBSTACLE;	//Indicates time out

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register. So, we're returning this value to the
 5c8:	8c b5       	in	r24, 0x2c	; 44
 5ca:	9d b5       	in	r25, 0x2d	; 45
 5cc:	a0 e0       	ldi	r26, 0x00	; 0
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
	// main function for utilizing it later

	//Stop Timer
	TCCR1B=0x00;
 5d0:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
 5d2:	81 36       	cpi	r24, 0x61	; 97
 5d4:	2a ee       	ldi	r18, 0xEA	; 234
 5d6:	92 07       	cpc	r25, r18
 5d8:	a1 05       	cpc	r26, r1
 5da:	b1 05       	cpc	r27, r1
 5dc:	58 f4       	brcc	.+22     	; 0x5f4 <GetPulseWidth+0x94>
	return US_NO_OBSTACLE;	//No obstacle
	else
	return (result>>1);
 5de:	b6 95       	lsr	r27
 5e0:	a7 95       	ror	r26
 5e2:	97 95       	ror	r25
 5e4:	87 95       	ror	r24
 5e6:	08 95       	ret
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	9f ef       	ldi	r25, 0xFF	; 255
 5ec:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
 5ee:	8e ef       	ldi	r24, 0xFE	; 254
 5f0:	9f ef       	ldi	r25, 0xFF	; 255
 5f2:	08 95       	ret

	//Stop Timer
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	//No obstacle
 5f4:	8e ef       	ldi	r24, 0xFE	; 254
 5f6:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
 5f8:	08 95       	ret

000005fa <main>:


int main (){
//Initialize the Servo Motor and the Other External Hardware Modeules
	
	HCSR04Init();  //ultrasonic initialize
 5fa:	0e 94 ac 02 	call	0x558	; 0x558 <HCSR04Init>
	Lcd_init();
 5fe:	0e 94 4d 01 	call	0x29a	; 0x29a <Lcd_init>
	DcMotor_init();
 602:	0e 94 41 00 	call	0x82	; 0x82 <DcMotor_init>
	Servo_init();
 606:	0e 94 4b 02 	call	0x496	; 0x496 <Servo_init>
	//Move Servo At Position zero at first
	Possition_Zero();
 60a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Possition_Zero>

	while(1){
		//Clear LCD To Update the Distance
		Lcd_Poss(0,0);
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	0e 94 3e 01 	call	0x27c	; 0x27c <Lcd_Poss>
		//Display The Distance on LCD
		Lcd_DisplayStr("Forward");
 616:	80 e6       	ldi	r24, 0x60	; 96
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 31 01 	call	0x262	; 0x262 <Lcd_DisplayStr>
		LCD_DisplayFloat(GetPulseWidth());
 61e:	0e 94 b0 02 	call	0x560	; 0x560 <GetPulseWidth>
 622:	bc 01       	movw	r22, r24
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 11 05 	call	0xa22	; 0xa22 <__floatunsisf>
 62c:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_DisplayFloat>
		//Check if there is an object in front of the vehicle
		if(GetPulseWidth()<=40){
 630:	0e 94 b0 02 	call	0x560	; 0x560 <GetPulseWidth>
 634:	89 97       	sbiw	r24, 0x29	; 41
 636:	08 f0       	brcs	.+2      	; 0x63a <main+0x40>
 638:	4f c0       	rjmp	.+158    	; 0x6d8 <main+0xde>
			//Stop the Car
			Stop();
 63a:	0e 94 a9 00 	call	0x152	; 0x152 <Stop>
			//turn servo at position 90
			Possition_90();			
 63e:	0e 94 6f 02 	call	0x4de	; 0x4de <Possition_90>
			//Check if there is an object in right of the vehicle
			if(GetPulseWidth()<=40){
 642:	0e 94 b0 02 	call	0x560	; 0x560 <GetPulseWidth>
 646:	89 97       	sbiw	r24, 0x29	; 41
 648:	70 f5       	brcc	.+92     	; 0x6a6 <main+0xac>
				//turn servo at position 180
				Possition_180();
 64a:	0e 94 8d 02 	call	0x51a	; 0x51a <Possition_180>
				//Check if there is an object in left of the vehicle
				if(GetPulseWidth()<=40){
 64e:	0e 94 b0 02 	call	0x560	; 0x560 <GetPulseWidth>
 652:	89 97       	sbiw	r24, 0x29	; 41
 654:	18 f4       	brcc	.+6      	; 0x65c <main+0x62>
					//if there was an object of it's left the car should stop
					Stop();
 656:	0e 94 a9 00 	call	0x152	; 0x152 <Stop>
 65a:	40 c0       	rjmp	.+128    	; 0x6dc <main+0xe2>
				}
				else{
					//if not the left side is the suitable side
					Lcd_DisplayStr("Turning left");
 65c:	88 e6       	ldi	r24, 0x68	; 104
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 31 01 	call	0x262	; 0x262 <Lcd_DisplayStr>
					TurnLeft();
 664:	0e 94 b4 00 	call	0x168	; 0x168 <TurnLeft>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 668:	8f ef       	ldi	r24, 0xFF	; 255
 66a:	9f ef       	ldi	r25, 0xFF	; 255
 66c:	05 c0       	rjmp	.+10     	; 0x678 <main+0x7e>
 66e:	e9 e1       	ldi	r30, 0x19	; 25
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	31 97       	sbiw	r30, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <main+0x78>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 676:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	c9 f7       	brne	.-14     	; 0x66e <main+0x74>
					_delay_ms(10000);
					Lcd_DisplayStr("Forward left");
 67c:	85 e7       	ldi	r24, 0x75	; 117
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 31 01 	call	0x262	; 0x262 <Lcd_DisplayStr>
				//Move to Position 90 first to adjust the servo on right position
					Possition_90();
 684:	0e 94 6f 02 	call	0x4de	; 0x4de <Possition_90>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 688:	88 e8       	ldi	r24, 0x88	; 136
 68a:	93 e1       	ldi	r25, 0x13	; 19
 68c:	05 c0       	rjmp	.+10     	; 0x698 <main+0x9e>
 68e:	e9 e1       	ldi	r30, 0x19	; 25
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	31 97       	sbiw	r30, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <main+0x98>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 696:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	c9 f7       	brne	.-14     	; 0x68e <main+0x94>
					_delay_ms(500);
					Possition_Zero();
 69c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Possition_Zero>
					GoForward();
 6a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <GoForward>
 6a4:	1b c0       	rjmp	.+54     	; 0x6dc <main+0xe2>
				}

			}
			else{
				//if the right side is the suitable one go right
				Lcd_DisplayStr("Turning right");
 6a6:	82 e8       	ldi	r24, 0x82	; 130
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 31 01 	call	0x262	; 0x262 <Lcd_DisplayStr>
				TurnRight();
 6ae:	0e 94 c5 00 	call	0x18a	; 0x18a <TurnRight>
				Possition_Zero();
 6b2:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Possition_Zero>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	9f ef       	ldi	r25, 0xFF	; 255
 6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <main+0xcc>
 6bc:	e9 e1       	ldi	r30, 0x19	; 25
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	31 97       	sbiw	r30, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <main+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6c6:	00 97       	sbiw	r24, 0x00	; 0
 6c8:	c9 f7       	brne	.-14     	; 0x6bc <main+0xc2>
				_delay_ms(10000);
				Lcd_DisplayStr("Forward right");
 6ca:	80 e9       	ldi	r24, 0x90	; 144
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 31 01 	call	0x262	; 0x262 <Lcd_DisplayStr>

				GoForward();
 6d2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <GoForward>
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <main+0xe2>
			}

		}
		else
			//if there was no object in front of the car
			GoForward();
 6d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <GoForward>
			Lcd_DisplayStr("Forward");
 6dc:	80 e6       	ldi	r24, 0x60	; 96
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 31 01 	call	0x262	; 0x262 <Lcd_DisplayStr>
	}
 6e4:	94 cf       	rjmp	.-216    	; 0x60e <main+0x14>

000006e6 <DIO_ConfigChannel>:
		break;
		case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
		break;
		case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
 6e6:	81 30       	cpi	r24, 0x01	; 1
 6e8:	01 f1       	breq	.+64     	; 0x72a <DIO_ConfigChannel+0x44>
 6ea:	30 f0       	brcs	.+12     	; 0x6f8 <DIO_ConfigChannel+0x12>
 6ec:	82 30       	cpi	r24, 0x02	; 2
 6ee:	b1 f1       	breq	.+108    	; 0x75c <DIO_ConfigChannel+0x76>
 6f0:	83 30       	cpi	r24, 0x03	; 3
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <DIO_ConfigChannel+0x10>
 6f4:	4c c0       	rjmp	.+152    	; 0x78e <DIO_ConfigChannel+0xa8>
 6f6:	08 95       	ret
 6f8:	41 11       	cpse	r20, r1
 6fa:	0c c0       	rjmp	.+24     	; 0x714 <DIO_ConfigChannel+0x2e>
 6fc:	2a b3       	in	r18, 0x1a	; 26
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_ConfigChannel+0x22>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_ConfigChannel+0x1e>
 70c:	80 95       	com	r24
 70e:	82 23       	and	r24, r18
 710:	8a bb       	out	0x1a, r24	; 26
 712:	08 95       	ret
 714:	2a b3       	in	r18, 0x1a	; 26
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_ConfigChannel+0x3a>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_ConfigChannel+0x36>
 724:	82 2b       	or	r24, r18
 726:	8a bb       	out	0x1a, r24	; 26
 728:	08 95       	ret
 72a:	41 11       	cpse	r20, r1
 72c:	0c c0       	rjmp	.+24     	; 0x746 <DIO_ConfigChannel+0x60>
 72e:	27 b3       	in	r18, 0x17	; 23
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_ConfigChannel+0x54>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_ConfigChannel+0x50>
 73e:	80 95       	com	r24
 740:	82 23       	and	r24, r18
 742:	87 bb       	out	0x17, r24	; 23
 744:	08 95       	ret
 746:	27 b3       	in	r18, 0x17	; 23
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_ConfigChannel+0x6c>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	6a 95       	dec	r22
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_ConfigChannel+0x68>
 756:	82 2b       	or	r24, r18
 758:	87 bb       	out	0x17, r24	; 23
 75a:	08 95       	ret
 75c:	41 11       	cpse	r20, r1
 75e:	0c c0       	rjmp	.+24     	; 0x778 <DIO_ConfigChannel+0x92>
 760:	24 b3       	in	r18, 0x14	; 20
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_ConfigChannel+0x86>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_ConfigChannel+0x82>
 770:	80 95       	com	r24
 772:	82 23       	and	r24, r18
 774:	84 bb       	out	0x14, r24	; 20
 776:	08 95       	ret
 778:	24 b3       	in	r18, 0x14	; 20
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <DIO_ConfigChannel+0x9e>
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	6a 95       	dec	r22
 786:	e2 f7       	brpl	.-8      	; 0x780 <DIO_ConfigChannel+0x9a>
 788:	82 2b       	or	r24, r18
 78a:	84 bb       	out	0x14, r24	; 20
 78c:	08 95       	ret
 78e:	41 11       	cpse	r20, r1
 790:	0c c0       	rjmp	.+24     	; 0x7aa <DIO_ConfigChannel+0xc4>
 792:	21 b3       	in	r18, 0x11	; 17
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_ConfigChannel+0xb8>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	6a 95       	dec	r22
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_ConfigChannel+0xb4>
 7a2:	80 95       	com	r24
 7a4:	82 23       	and	r24, r18
 7a6:	81 bb       	out	0x11, r24	; 17
 7a8:	08 95       	ret
 7aa:	21 b3       	in	r18, 0x11	; 17
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_ConfigChannel+0xd0>
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	6a 95       	dec	r22
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_ConfigChannel+0xcc>
 7ba:	82 2b       	or	r24, r18
 7bc:	81 bb       	out	0x11, r24	; 17
 7be:	08 95       	ret

000007c0 <DIO_WriteChannel>:
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	01 f1       	breq	.+64     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7c4:	30 f0       	brcs	.+12     	; 0x7d2 <DIO_WriteChannel+0x12>
 7c6:	82 30       	cpi	r24, 0x02	; 2
 7c8:	b1 f1       	breq	.+108    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7ca:	83 30       	cpi	r24, 0x03	; 3
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <DIO_WriteChannel+0x10>
 7ce:	4c c0       	rjmp	.+152    	; 0x868 <__stack+0x9>
 7d0:	08 95       	ret
 7d2:	41 30       	cpi	r20, 0x01	; 1
 7d4:	59 f4       	brne	.+22     	; 0x7ec <DIO_WriteChannel+0x2c>
 7d6:	2b b3       	in	r18, 0x1b	; 27
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_WriteChannel+0x22>
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	6a 95       	dec	r22
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_WriteChannel+0x1e>
 7e6:	82 2b       	or	r24, r18
 7e8:	8b bb       	out	0x1b, r24	; 27
 7ea:	08 95       	ret
 7ec:	2b b3       	in	r18, 0x1b	; 27
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_WriteChannel+0x38>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_WriteChannel+0x34>
 7fc:	80 95       	com	r24
 7fe:	82 23       	and	r24, r18
 800:	8b bb       	out	0x1b, r24	; 27
 802:	08 95       	ret
 804:	41 30       	cpi	r20, 0x01	; 1
 806:	59 f4       	brne	.+22     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 808:	28 b3       	in	r18, 0x18	; 24
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	6a 95       	dec	r22
 816:	e2 f7       	brpl	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 818:	82 2b       	or	r24, r18
 81a:	88 bb       	out	0x18, r24	; 24
 81c:	08 95       	ret
 81e:	28 b3       	in	r18, 0x18	; 24
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	6a 95       	dec	r22
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	80 95       	com	r24
 830:	82 23       	and	r24, r18
 832:	88 bb       	out	0x18, r24	; 24
 834:	08 95       	ret
 836:	41 30       	cpi	r20, 0x01	; 1
 838:	59 f4       	brne	.+22     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 83a:	25 b3       	in	r18, 0x15	; 21
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	6a 95       	dec	r22
 848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84a:	82 2b       	or	r24, r18
 84c:	85 bb       	out	0x15, r24	; 21
 84e:	08 95       	ret
 850:	25 b3       	in	r18, 0x15	; 21
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	6a 95       	dec	r22
 85e:	e2 f7       	brpl	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 860:	80 95       	com	r24
 862:	82 23       	and	r24, r18
 864:	85 bb       	out	0x15, r24	; 21
 866:	08 95       	ret
 868:	41 30       	cpi	r20, 0x01	; 1
 86a:	59 f4       	brne	.+22     	; 0x882 <__stack+0x23>
 86c:	22 b3       	in	r18, 0x12	; 18
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	6a 95       	dec	r22
 87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
 87c:	82 2b       	or	r24, r18
 87e:	82 bb       	out	0x12, r24	; 18
 880:	08 95       	ret
 882:	22 b3       	in	r18, 0x12	; 18
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
 88a:	88 0f       	add	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	6a 95       	dec	r22
 890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
 892:	80 95       	com	r24
 894:	82 23       	and	r24, r18
 896:	82 bb       	out	0x12, r24	; 18
 898:	08 95       	ret

0000089a <DIO_WriteGroup>:
		break;
	}
}
void DIO_WriteGroup(port_type port,u8 mask,u8 data){
	switch(port){
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	71 f0       	breq	.+28     	; 0x8ba <DIO_WriteGroup+0x20>
 89e:	28 f0       	brcs	.+10     	; 0x8aa <DIO_WriteGroup+0x10>
 8a0:	82 30       	cpi	r24, 0x02	; 2
 8a2:	99 f0       	breq	.+38     	; 0x8ca <DIO_WriteGroup+0x30>
 8a4:	83 30       	cpi	r24, 0x03	; 3
 8a6:	c9 f0       	breq	.+50     	; 0x8da <DIO_WriteGroup+0x40>
 8a8:	08 95       	ret
		case DIO_PORTA:
		DIO_PORTA_REG=(DIO_PORTA_REG&~mask)|(data&mask);
 8aa:	8b b3       	in	r24, 0x1b	; 27
 8ac:	96 2f       	mov	r25, r22
 8ae:	90 95       	com	r25
 8b0:	89 23       	and	r24, r25
 8b2:	46 23       	and	r20, r22
 8b4:	48 2b       	or	r20, r24
 8b6:	4b bb       	out	0x1b, r20	; 27
		break;
 8b8:	08 95       	ret
		case DIO_PORTB:
		DIO_PORTB_REG=(DIO_PORTB_REG&~mask)|(data&mask);
 8ba:	88 b3       	in	r24, 0x18	; 24
 8bc:	96 2f       	mov	r25, r22
 8be:	90 95       	com	r25
 8c0:	89 23       	and	r24, r25
 8c2:	46 23       	and	r20, r22
 8c4:	48 2b       	or	r20, r24
 8c6:	48 bb       	out	0x18, r20	; 24
		break;
 8c8:	08 95       	ret
		case DIO_PORTC:
		DIO_PORTC_REG=(DIO_PORTC_REG&~mask)|(data&mask);
 8ca:	85 b3       	in	r24, 0x15	; 21
 8cc:	96 2f       	mov	r25, r22
 8ce:	90 95       	com	r25
 8d0:	89 23       	and	r24, r25
 8d2:	46 23       	and	r20, r22
 8d4:	48 2b       	or	r20, r24
 8d6:	45 bb       	out	0x15, r20	; 21
		break;
 8d8:	08 95       	ret
		case DIO_PORTD:
		DIO_PORTD_REG=(DIO_PORTD_REG&~mask)|(data&mask);
 8da:	82 b3       	in	r24, 0x12	; 18
 8dc:	96 2f       	mov	r25, r22
 8de:	90 95       	com	r25
 8e0:	89 23       	and	r24, r25
 8e2:	46 23       	and	r20, r22
 8e4:	48 2b       	or	r20, r24
 8e6:	42 bb       	out	0x12, r20	; 18
 8e8:	08 95       	ret

000008ea <__subsf3>:
 8ea:	50 58       	subi	r21, 0x80	; 128

000008ec <__addsf3>:
 8ec:	bb 27       	eor	r27, r27
 8ee:	aa 27       	eor	r26, r26
 8f0:	0e 94 8d 04 	call	0x91a	; 0x91a <__addsf3x>
 8f4:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_round>
 8f8:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_pscA>
 8fc:	38 f0       	brcs	.+14     	; 0x90c <__addsf3+0x20>
 8fe:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_pscB>
 902:	20 f0       	brcs	.+8      	; 0x90c <__addsf3+0x20>
 904:	39 f4       	brne	.+14     	; 0x914 <__addsf3+0x28>
 906:	9f 3f       	cpi	r25, 0xFF	; 255
 908:	19 f4       	brne	.+6      	; 0x910 <__addsf3+0x24>
 90a:	26 f4       	brtc	.+8      	; 0x914 <__addsf3+0x28>
 90c:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__fp_nan>
 910:	0e f4       	brtc	.+2      	; 0x914 <__addsf3+0x28>
 912:	e0 95       	com	r30
 914:	e7 fb       	bst	r30, 7
 916:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_inf>

0000091a <__addsf3x>:
 91a:	e9 2f       	mov	r30, r25
 91c:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_split3>
 920:	58 f3       	brcs	.-42     	; 0x8f8 <__addsf3+0xc>
 922:	ba 17       	cp	r27, r26
 924:	62 07       	cpc	r22, r18
 926:	73 07       	cpc	r23, r19
 928:	84 07       	cpc	r24, r20
 92a:	95 07       	cpc	r25, r21
 92c:	20 f0       	brcs	.+8      	; 0x936 <__addsf3x+0x1c>
 92e:	79 f4       	brne	.+30     	; 0x94e <__addsf3x+0x34>
 930:	a6 f5       	brtc	.+104    	; 0x99a <__addsf3x+0x80>
 932:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_zero>
 936:	0e f4       	brtc	.+2      	; 0x93a <__addsf3x+0x20>
 938:	e0 95       	com	r30
 93a:	0b 2e       	mov	r0, r27
 93c:	ba 2f       	mov	r27, r26
 93e:	a0 2d       	mov	r26, r0
 940:	0b 01       	movw	r0, r22
 942:	b9 01       	movw	r22, r18
 944:	90 01       	movw	r18, r0
 946:	0c 01       	movw	r0, r24
 948:	ca 01       	movw	r24, r20
 94a:	a0 01       	movw	r20, r0
 94c:	11 24       	eor	r1, r1
 94e:	ff 27       	eor	r31, r31
 950:	59 1b       	sub	r21, r25
 952:	99 f0       	breq	.+38     	; 0x97a <__addsf3x+0x60>
 954:	59 3f       	cpi	r21, 0xF9	; 249
 956:	50 f4       	brcc	.+20     	; 0x96c <__addsf3x+0x52>
 958:	50 3e       	cpi	r21, 0xE0	; 224
 95a:	68 f1       	brcs	.+90     	; 0x9b6 <__addsf3x+0x9c>
 95c:	1a 16       	cp	r1, r26
 95e:	f0 40       	sbci	r31, 0x00	; 0
 960:	a2 2f       	mov	r26, r18
 962:	23 2f       	mov	r18, r19
 964:	34 2f       	mov	r19, r20
 966:	44 27       	eor	r20, r20
 968:	58 5f       	subi	r21, 0xF8	; 248
 96a:	f3 cf       	rjmp	.-26     	; 0x952 <__addsf3x+0x38>
 96c:	46 95       	lsr	r20
 96e:	37 95       	ror	r19
 970:	27 95       	ror	r18
 972:	a7 95       	ror	r26
 974:	f0 40       	sbci	r31, 0x00	; 0
 976:	53 95       	inc	r21
 978:	c9 f7       	brne	.-14     	; 0x96c <__addsf3x+0x52>
 97a:	7e f4       	brtc	.+30     	; 0x99a <__addsf3x+0x80>
 97c:	1f 16       	cp	r1, r31
 97e:	ba 0b       	sbc	r27, r26
 980:	62 0b       	sbc	r22, r18
 982:	73 0b       	sbc	r23, r19
 984:	84 0b       	sbc	r24, r20
 986:	ba f0       	brmi	.+46     	; 0x9b6 <__addsf3x+0x9c>
 988:	91 50       	subi	r25, 0x01	; 1
 98a:	a1 f0       	breq	.+40     	; 0x9b4 <__addsf3x+0x9a>
 98c:	ff 0f       	add	r31, r31
 98e:	bb 1f       	adc	r27, r27
 990:	66 1f       	adc	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	c2 f7       	brpl	.-16     	; 0x988 <__addsf3x+0x6e>
 998:	0e c0       	rjmp	.+28     	; 0x9b6 <__addsf3x+0x9c>
 99a:	ba 0f       	add	r27, r26
 99c:	62 1f       	adc	r22, r18
 99e:	73 1f       	adc	r23, r19
 9a0:	84 1f       	adc	r24, r20
 9a2:	48 f4       	brcc	.+18     	; 0x9b6 <__addsf3x+0x9c>
 9a4:	87 95       	ror	r24
 9a6:	77 95       	ror	r23
 9a8:	67 95       	ror	r22
 9aa:	b7 95       	ror	r27
 9ac:	f7 95       	ror	r31
 9ae:	9e 3f       	cpi	r25, 0xFE	; 254
 9b0:	08 f0       	brcs	.+2      	; 0x9b4 <__addsf3x+0x9a>
 9b2:	b0 cf       	rjmp	.-160    	; 0x914 <__addsf3+0x28>
 9b4:	93 95       	inc	r25
 9b6:	88 0f       	add	r24, r24
 9b8:	08 f0       	brcs	.+2      	; 0x9bc <__addsf3x+0xa2>
 9ba:	99 27       	eor	r25, r25
 9bc:	ee 0f       	add	r30, r30
 9be:	97 95       	ror	r25
 9c0:	87 95       	ror	r24
 9c2:	08 95       	ret

000009c4 <__fixunssfsi>:
 9c4:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_splitA>
 9c8:	88 f0       	brcs	.+34     	; 0x9ec <__fixunssfsi+0x28>
 9ca:	9f 57       	subi	r25, 0x7F	; 127
 9cc:	98 f0       	brcs	.+38     	; 0x9f4 <__fixunssfsi+0x30>
 9ce:	b9 2f       	mov	r27, r25
 9d0:	99 27       	eor	r25, r25
 9d2:	b7 51       	subi	r27, 0x17	; 23
 9d4:	b0 f0       	brcs	.+44     	; 0xa02 <__fixunssfsi+0x3e>
 9d6:	e1 f0       	breq	.+56     	; 0xa10 <__fixunssfsi+0x4c>
 9d8:	66 0f       	add	r22, r22
 9da:	77 1f       	adc	r23, r23
 9dc:	88 1f       	adc	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	1a f0       	brmi	.+6      	; 0x9e8 <__fixunssfsi+0x24>
 9e2:	ba 95       	dec	r27
 9e4:	c9 f7       	brne	.-14     	; 0x9d8 <__fixunssfsi+0x14>
 9e6:	14 c0       	rjmp	.+40     	; 0xa10 <__fixunssfsi+0x4c>
 9e8:	b1 30       	cpi	r27, 0x01	; 1
 9ea:	91 f0       	breq	.+36     	; 0xa10 <__fixunssfsi+0x4c>
 9ec:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_zero>
 9f0:	b1 e0       	ldi	r27, 0x01	; 1
 9f2:	08 95       	ret
 9f4:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_zero>
 9f8:	67 2f       	mov	r22, r23
 9fa:	78 2f       	mov	r23, r24
 9fc:	88 27       	eor	r24, r24
 9fe:	b8 5f       	subi	r27, 0xF8	; 248
 a00:	39 f0       	breq	.+14     	; 0xa10 <__fixunssfsi+0x4c>
 a02:	b9 3f       	cpi	r27, 0xF9	; 249
 a04:	cc f3       	brlt	.-14     	; 0x9f8 <__fixunssfsi+0x34>
 a06:	86 95       	lsr	r24
 a08:	77 95       	ror	r23
 a0a:	67 95       	ror	r22
 a0c:	b3 95       	inc	r27
 a0e:	d9 f7       	brne	.-10     	; 0xa06 <__fixunssfsi+0x42>
 a10:	3e f4       	brtc	.+14     	; 0xa20 <__fixunssfsi+0x5c>
 a12:	90 95       	com	r25
 a14:	80 95       	com	r24
 a16:	70 95       	com	r23
 a18:	61 95       	neg	r22
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	08 95       	ret

00000a22 <__floatunsisf>:
 a22:	e8 94       	clt
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <__floatsisf+0x12>

00000a26 <__floatsisf>:
 a26:	97 fb       	bst	r25, 7
 a28:	3e f4       	brtc	.+14     	; 0xa38 <__floatsisf+0x12>
 a2a:	90 95       	com	r25
 a2c:	80 95       	com	r24
 a2e:	70 95       	com	r23
 a30:	61 95       	neg	r22
 a32:	7f 4f       	sbci	r23, 0xFF	; 255
 a34:	8f 4f       	sbci	r24, 0xFF	; 255
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	99 23       	and	r25, r25
 a3a:	a9 f0       	breq	.+42     	; 0xa66 <__floatsisf+0x40>
 a3c:	f9 2f       	mov	r31, r25
 a3e:	96 e9       	ldi	r25, 0x96	; 150
 a40:	bb 27       	eor	r27, r27
 a42:	93 95       	inc	r25
 a44:	f6 95       	lsr	r31
 a46:	87 95       	ror	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b7 95       	ror	r27
 a4e:	f1 11       	cpse	r31, r1
 a50:	f8 cf       	rjmp	.-16     	; 0xa42 <__floatsisf+0x1c>
 a52:	fa f4       	brpl	.+62     	; 0xa92 <__floatsisf+0x6c>
 a54:	bb 0f       	add	r27, r27
 a56:	11 f4       	brne	.+4      	; 0xa5c <__floatsisf+0x36>
 a58:	60 ff       	sbrs	r22, 0
 a5a:	1b c0       	rjmp	.+54     	; 0xa92 <__floatsisf+0x6c>
 a5c:	6f 5f       	subi	r22, 0xFF	; 255
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	16 c0       	rjmp	.+44     	; 0xa92 <__floatsisf+0x6c>
 a66:	88 23       	and	r24, r24
 a68:	11 f0       	breq	.+4      	; 0xa6e <__floatsisf+0x48>
 a6a:	96 e9       	ldi	r25, 0x96	; 150
 a6c:	11 c0       	rjmp	.+34     	; 0xa90 <__floatsisf+0x6a>
 a6e:	77 23       	and	r23, r23
 a70:	21 f0       	breq	.+8      	; 0xa7a <__floatsisf+0x54>
 a72:	9e e8       	ldi	r25, 0x8E	; 142
 a74:	87 2f       	mov	r24, r23
 a76:	76 2f       	mov	r23, r22
 a78:	05 c0       	rjmp	.+10     	; 0xa84 <__floatsisf+0x5e>
 a7a:	66 23       	and	r22, r22
 a7c:	71 f0       	breq	.+28     	; 0xa9a <__floatsisf+0x74>
 a7e:	96 e8       	ldi	r25, 0x86	; 134
 a80:	86 2f       	mov	r24, r22
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	60 e0       	ldi	r22, 0x00	; 0
 a86:	2a f0       	brmi	.+10     	; 0xa92 <__floatsisf+0x6c>
 a88:	9a 95       	dec	r25
 a8a:	66 0f       	add	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	da f7       	brpl	.-10     	; 0xa88 <__floatsisf+0x62>
 a92:	88 0f       	add	r24, r24
 a94:	96 95       	lsr	r25
 a96:	87 95       	ror	r24
 a98:	97 f9       	bld	r25, 7
 a9a:	08 95       	ret

00000a9c <__fp_inf>:
 a9c:	97 f9       	bld	r25, 7
 a9e:	9f 67       	ori	r25, 0x7F	; 127
 aa0:	80 e8       	ldi	r24, 0x80	; 128
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	60 e0       	ldi	r22, 0x00	; 0
 aa6:	08 95       	ret

00000aa8 <__fp_nan>:
 aa8:	9f ef       	ldi	r25, 0xFF	; 255
 aaa:	80 ec       	ldi	r24, 0xC0	; 192
 aac:	08 95       	ret

00000aae <__fp_pscA>:
 aae:	00 24       	eor	r0, r0
 ab0:	0a 94       	dec	r0
 ab2:	16 16       	cp	r1, r22
 ab4:	17 06       	cpc	r1, r23
 ab6:	18 06       	cpc	r1, r24
 ab8:	09 06       	cpc	r0, r25
 aba:	08 95       	ret

00000abc <__fp_pscB>:
 abc:	00 24       	eor	r0, r0
 abe:	0a 94       	dec	r0
 ac0:	12 16       	cp	r1, r18
 ac2:	13 06       	cpc	r1, r19
 ac4:	14 06       	cpc	r1, r20
 ac6:	05 06       	cpc	r0, r21
 ac8:	08 95       	ret

00000aca <__fp_round>:
 aca:	09 2e       	mov	r0, r25
 acc:	03 94       	inc	r0
 ace:	00 0c       	add	r0, r0
 ad0:	11 f4       	brne	.+4      	; 0xad6 <__fp_round+0xc>
 ad2:	88 23       	and	r24, r24
 ad4:	52 f0       	brmi	.+20     	; 0xaea <__fp_round+0x20>
 ad6:	bb 0f       	add	r27, r27
 ad8:	40 f4       	brcc	.+16     	; 0xaea <__fp_round+0x20>
 ada:	bf 2b       	or	r27, r31
 adc:	11 f4       	brne	.+4      	; 0xae2 <__fp_round+0x18>
 ade:	60 ff       	sbrs	r22, 0
 ae0:	04 c0       	rjmp	.+8      	; 0xaea <__fp_round+0x20>
 ae2:	6f 5f       	subi	r22, 0xFF	; 255
 ae4:	7f 4f       	sbci	r23, 0xFF	; 255
 ae6:	8f 4f       	sbci	r24, 0xFF	; 255
 ae8:	9f 4f       	sbci	r25, 0xFF	; 255
 aea:	08 95       	ret

00000aec <__fp_split3>:
 aec:	57 fd       	sbrc	r21, 7
 aee:	90 58       	subi	r25, 0x80	; 128
 af0:	44 0f       	add	r20, r20
 af2:	55 1f       	adc	r21, r21
 af4:	59 f0       	breq	.+22     	; 0xb0c <__fp_splitA+0x10>
 af6:	5f 3f       	cpi	r21, 0xFF	; 255
 af8:	71 f0       	breq	.+28     	; 0xb16 <__fp_splitA+0x1a>
 afa:	47 95       	ror	r20

00000afc <__fp_splitA>:
 afc:	88 0f       	add	r24, r24
 afe:	97 fb       	bst	r25, 7
 b00:	99 1f       	adc	r25, r25
 b02:	61 f0       	breq	.+24     	; 0xb1c <__fp_splitA+0x20>
 b04:	9f 3f       	cpi	r25, 0xFF	; 255
 b06:	79 f0       	breq	.+30     	; 0xb26 <__fp_splitA+0x2a>
 b08:	87 95       	ror	r24
 b0a:	08 95       	ret
 b0c:	12 16       	cp	r1, r18
 b0e:	13 06       	cpc	r1, r19
 b10:	14 06       	cpc	r1, r20
 b12:	55 1f       	adc	r21, r21
 b14:	f2 cf       	rjmp	.-28     	; 0xafa <__fp_split3+0xe>
 b16:	46 95       	lsr	r20
 b18:	f1 df       	rcall	.-30     	; 0xafc <__fp_splitA>
 b1a:	08 c0       	rjmp	.+16     	; 0xb2c <__fp_splitA+0x30>
 b1c:	16 16       	cp	r1, r22
 b1e:	17 06       	cpc	r1, r23
 b20:	18 06       	cpc	r1, r24
 b22:	99 1f       	adc	r25, r25
 b24:	f1 cf       	rjmp	.-30     	; 0xb08 <__fp_splitA+0xc>
 b26:	86 95       	lsr	r24
 b28:	71 05       	cpc	r23, r1
 b2a:	61 05       	cpc	r22, r1
 b2c:	08 94       	sec
 b2e:	08 95       	ret

00000b30 <__fp_zero>:
 b30:	e8 94       	clt

00000b32 <__fp_szero>:
 b32:	bb 27       	eor	r27, r27
 b34:	66 27       	eor	r22, r22
 b36:	77 27       	eor	r23, r23
 b38:	cb 01       	movw	r24, r22
 b3a:	97 f9       	bld	r25, 7
 b3c:	08 95       	ret

00000b3e <__mulsf3>:
 b3e:	0e 94 b2 05 	call	0xb64	; 0xb64 <__mulsf3x>
 b42:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_round>
 b46:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_pscA>
 b4a:	38 f0       	brcs	.+14     	; 0xb5a <__mulsf3+0x1c>
 b4c:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_pscB>
 b50:	20 f0       	brcs	.+8      	; 0xb5a <__mulsf3+0x1c>
 b52:	95 23       	and	r25, r21
 b54:	11 f0       	breq	.+4      	; 0xb5a <__mulsf3+0x1c>
 b56:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_inf>
 b5a:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__fp_nan>
 b5e:	11 24       	eor	r1, r1
 b60:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_szero>

00000b64 <__mulsf3x>:
 b64:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_split3>
 b68:	70 f3       	brcs	.-36     	; 0xb46 <__mulsf3+0x8>

00000b6a <__mulsf3_pse>:
 b6a:	95 9f       	mul	r25, r21
 b6c:	c1 f3       	breq	.-16     	; 0xb5e <__mulsf3+0x20>
 b6e:	95 0f       	add	r25, r21
 b70:	50 e0       	ldi	r21, 0x00	; 0
 b72:	55 1f       	adc	r21, r21
 b74:	62 9f       	mul	r22, r18
 b76:	f0 01       	movw	r30, r0
 b78:	72 9f       	mul	r23, r18
 b7a:	bb 27       	eor	r27, r27
 b7c:	f0 0d       	add	r31, r0
 b7e:	b1 1d       	adc	r27, r1
 b80:	63 9f       	mul	r22, r19
 b82:	aa 27       	eor	r26, r26
 b84:	f0 0d       	add	r31, r0
 b86:	b1 1d       	adc	r27, r1
 b88:	aa 1f       	adc	r26, r26
 b8a:	64 9f       	mul	r22, r20
 b8c:	66 27       	eor	r22, r22
 b8e:	b0 0d       	add	r27, r0
 b90:	a1 1d       	adc	r26, r1
 b92:	66 1f       	adc	r22, r22
 b94:	82 9f       	mul	r24, r18
 b96:	22 27       	eor	r18, r18
 b98:	b0 0d       	add	r27, r0
 b9a:	a1 1d       	adc	r26, r1
 b9c:	62 1f       	adc	r22, r18
 b9e:	73 9f       	mul	r23, r19
 ba0:	b0 0d       	add	r27, r0
 ba2:	a1 1d       	adc	r26, r1
 ba4:	62 1f       	adc	r22, r18
 ba6:	83 9f       	mul	r24, r19
 ba8:	a0 0d       	add	r26, r0
 baa:	61 1d       	adc	r22, r1
 bac:	22 1f       	adc	r18, r18
 bae:	74 9f       	mul	r23, r20
 bb0:	33 27       	eor	r19, r19
 bb2:	a0 0d       	add	r26, r0
 bb4:	61 1d       	adc	r22, r1
 bb6:	23 1f       	adc	r18, r19
 bb8:	84 9f       	mul	r24, r20
 bba:	60 0d       	add	r22, r0
 bbc:	21 1d       	adc	r18, r1
 bbe:	82 2f       	mov	r24, r18
 bc0:	76 2f       	mov	r23, r22
 bc2:	6a 2f       	mov	r22, r26
 bc4:	11 24       	eor	r1, r1
 bc6:	9f 57       	subi	r25, 0x7F	; 127
 bc8:	50 40       	sbci	r21, 0x00	; 0
 bca:	9a f0       	brmi	.+38     	; 0xbf2 <__mulsf3_pse+0x88>
 bcc:	f1 f0       	breq	.+60     	; 0xc0a <__mulsf3_pse+0xa0>
 bce:	88 23       	and	r24, r24
 bd0:	4a f0       	brmi	.+18     	; 0xbe4 <__mulsf3_pse+0x7a>
 bd2:	ee 0f       	add	r30, r30
 bd4:	ff 1f       	adc	r31, r31
 bd6:	bb 1f       	adc	r27, r27
 bd8:	66 1f       	adc	r22, r22
 bda:	77 1f       	adc	r23, r23
 bdc:	88 1f       	adc	r24, r24
 bde:	91 50       	subi	r25, 0x01	; 1
 be0:	50 40       	sbci	r21, 0x00	; 0
 be2:	a9 f7       	brne	.-22     	; 0xbce <__mulsf3_pse+0x64>
 be4:	9e 3f       	cpi	r25, 0xFE	; 254
 be6:	51 05       	cpc	r21, r1
 be8:	80 f0       	brcs	.+32     	; 0xc0a <__mulsf3_pse+0xa0>
 bea:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_inf>
 bee:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_szero>
 bf2:	5f 3f       	cpi	r21, 0xFF	; 255
 bf4:	e4 f3       	brlt	.-8      	; 0xbee <__mulsf3_pse+0x84>
 bf6:	98 3e       	cpi	r25, 0xE8	; 232
 bf8:	d4 f3       	brlt	.-12     	; 0xbee <__mulsf3_pse+0x84>
 bfa:	86 95       	lsr	r24
 bfc:	77 95       	ror	r23
 bfe:	67 95       	ror	r22
 c00:	b7 95       	ror	r27
 c02:	f7 95       	ror	r31
 c04:	e7 95       	ror	r30
 c06:	9f 5f       	subi	r25, 0xFF	; 255
 c08:	c1 f7       	brne	.-16     	; 0xbfa <__mulsf3_pse+0x90>
 c0a:	fe 2b       	or	r31, r30
 c0c:	88 0f       	add	r24, r24
 c0e:	91 1d       	adc	r25, r1
 c10:	96 95       	lsr	r25
 c12:	87 95       	ror	r24
 c14:	97 f9       	bld	r25, 7
 c16:	08 95       	ret

00000c18 <__umulhisi3>:
 c18:	a2 9f       	mul	r26, r18
 c1a:	b0 01       	movw	r22, r0
 c1c:	b3 9f       	mul	r27, r19
 c1e:	c0 01       	movw	r24, r0
 c20:	a3 9f       	mul	r26, r19
 c22:	70 0d       	add	r23, r0
 c24:	81 1d       	adc	r24, r1
 c26:	11 24       	eor	r1, r1
 c28:	91 1d       	adc	r25, r1
 c2a:	b2 9f       	mul	r27, r18
 c2c:	70 0d       	add	r23, r0
 c2e:	81 1d       	adc	r24, r1
 c30:	11 24       	eor	r1, r1
 c32:	91 1d       	adc	r25, r1
 c34:	08 95       	ret

00000c36 <_exit>:
 c36:	f8 94       	cli

00000c38 <__stop_program>:
 c38:	ff cf       	rjmp	.-2      	; 0xc38 <__stop_program>
